swagger: "2.0"
info:
  title: user/user.proto
  version: version not set
tags:
  - name: UserService
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/token/refresh:
    post:
      operationId: UserService_RefreshToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceRefreshTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/user_serviceRefreshTokenRequest'
      tags:
        - UserService
  /api/v1/user/login:
    post:
      operationId: UserService_Login
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceLoginResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/user_serviceLoginRequest'
      tags:
        - UserService
  /api/v1/user/logout:
    post:
      operationId: UserService_Logout
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceLogoutResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/user_serviceLogoutRequest'
      tags:
        - UserService
  /api/v1/user/register:
    put:
      operationId: UserService_Register
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceRegisterResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/user_serviceRegisterRequest'
      tags:
        - UserService
  /api/v1/user/{username}:
    get:
      operationId: UserService_Get
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceGetUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          in: path
          required: true
          type: string
      tags:
        - UserService
    delete:
      operationId: UserService_Delete
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceDeleteResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          in: path
          required: true
          type: string
      tags:
        - UserService
    patch:
      operationId: UserService_Update
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceUpdateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserServiceUpdateBody'
      tags:
        - UserService
  /api/v1/user/{username}/password:
    post:
      operationId: UserService_ChangePassword
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceChangePasswordResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserServiceChangePasswordBody'
      tags:
        - UserService
  /api/v1/users:
    get:
      operationId: UserService_List
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/user_serviceListUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page
          in: query
          required: false
          type: integer
          format: int64
        - name: pageSize
          in: query
          required: false
          type: integer
          format: int64
      tags:
        - UserService
definitions:
  LoginResponseData:
    type: object
    properties:
      token:
        type: string
      tokenExpiresAtUnix:
        type: string
        format: int64
      refreshToken:
        type: string
      refreshTokenExpiresAtUnix:
        type: string
        format: int64
  UserServiceChangePasswordBody:
    type: object
    properties:
      oldPassword:
        type: string
      newPassword:
        type: string
  UserServiceUpdateBody:
    type: object
    properties:
      email:
        type: string
      name:
        type: string
      cmnd:
        type: string
      birthday:
        type: string
        format: int64
      gender:
        type: boolean
      permanentAddress:
        type: string
      phoneNumber:
        type: string
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  user_serviceChangePasswordResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  user_serviceDeleteResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  user_serviceGetUserResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      data:
        $ref: '#/definitions/user_serviceUserProfile'
  user_serviceListUsersResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/user_serviceUserProfile'
      total:
        type: string
        format: uint64
      page:
        type: integer
        format: int64
      pageSize:
        type: integer
        format: int64
  user_serviceLoginRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  user_serviceLoginResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      data:
        $ref: '#/definitions/LoginResponseData'
  user_serviceLogoutRequest:
    type: object
    properties:
      refreshToken:
        type: string
  user_serviceLogoutResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  user_serviceRefreshTokenRequest:
    type: object
    properties:
      refreshToken:
        type: string
  user_serviceRefreshTokenResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      data:
        $ref: '#/definitions/LoginResponseData'
  user_serviceRegisterRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
      name:
        type: string
      cmnd:
        type: string
      birthday:
        type: string
        format: int64
      gender:
        type: boolean
      permanentAddress:
        type: string
      phoneNumber:
        type: string
  user_serviceRegisterResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  user_serviceUpdateUserResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  user_serviceUserProfile:
    type: object
    properties:
      id:
        type: string
        format: int64
      username:
        type: string
      name:
        type: string
      email:
        type: string
      cmnd:
        type: string
      birthday:
        type: string
        format: int64
      gender:
        type: boolean
      permanentAddress:
        type: string
      phoneNumber:
        type: string
      createdAt:
        type: string
        format: int64
      updatedAt:
        type: string
        format: int64
